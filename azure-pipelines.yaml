name: $(Date:yyyyMMdd)$(Rev:.r)

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main

variables:
  python.version: "3.8"
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: "5e65dc6e-c943-46d1-b7ec-7d64a58d2f45"
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: "test"

stages:
  #--------------------------------------------#
  # BUILD STAGE
  #--------------------------------------------#
  - stage: CreateInfrastructure
    jobs:
      - job: BuildInfrastructure
        steps:
          #--------------------------------------------#
          # Use Terraform to create the Infrastructure
          # Install Terraform on the pipeline agent
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Terrafom installation"
            inputs:
              terraformVersion: "1.5.5"

          # Run Terraform Init on the pipeline agent
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: "Terrafom init"
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              backendServiceArm: "$(azureServiceConnectionId)"
              backendAzureRmResourceGroupName: "tanttn-udacity-devops"
              backendAzureRmStorageAccountName: "tfstate1000224335"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "test.terraform.tfstate"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform validate
            inputs:
              provider: "azurerm"
              command: "validate"

          # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it.
          # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module.
          # Install public key and private key file to the pipeline agent, using the task below.
          # ToDo: Change the inputs value below
          # - task: InstallSSHKey@0
          #   inputs:
          #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
          #     sshPublicKey: 'PUBLIC_KEY'            # variable value
          #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file

          # - task: DownloadSecureFile@1
          #  name: udacity_public_key
          #  displayName:
          #  inputs:
          #   secureFile:

          # Run Terraform Apply
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"
      - job: PackageDeploymentFiles
        dependsOn: BuildInfrastructure
        condition: succeeded()
        steps:
          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.BuildId)-fakerestapi.zip"

          - task: PublishPipelineArtifact@1
            displayName: "Upload Fake RestAPI"
            inputs:
              targetPath: "$(Build.BuildId)-fakerestapi.zip"
              artifact: "tanttn-fakerestapi"
      - job: PackageSelenium
        dependsOn: PackageDeploymentFiles
        condition: succeeded()
        steps:
          - task: ArchiveFiles@2
            displayName: "Archive Selenium"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.BuildId)-selenium.zip"
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            displayName: "Upload Selenium"
            inputs:
              targetPath: "$(Build.BuildId)-selenium.zip"
              artifact: "tanttn-selenium"

  - stage: DeployWebApp
    dependsOn: CreateInfrastructure
    condition: succeeded()
    jobs:
      - deployment: FakeRestAPI
        pool:
          vmImage: "ubuntu-latest"
        environment: "tantnt-udacity-test-env"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy Azure Web App"
                  inputs:
                    azureSubscription: "f0c56712-80d8-43e9-b7cb-fe2bcf946c53"
                    appName: "tanttnUdacityDevops-AppService"
                    appType: webApp
                    package: $(Pipeline.Workspace)/tanttn-fakerestapi/$(Build.BuildId)-fakerestapi.zip
                    deploymentMethod: "auto"
  - stage: Testing
    dependsOn: DeployWebApp
    condition: succeeded()
    jobs:
      - job: TestPostman
        pool:
          vmImage: "ubuntu-latest"
        steps:
        - task: NodeTool@0
          inputs:
            versionSource: 'spec'
            versionSpec: '16.x'
        - task: CmdLine@2
          displayName: Install Newman
          inputs:
            script: 'npm install newman -g'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        # Postman Data Validation Test Suite
        - task: CmdLine@2
          displayName: Run Data Validation Tests
          continueOnError: true
          inputs:
            script: 'newman run Validation.postman_collection.json -e Tanttn-Udacity-Env.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        # Postman Regression Test Suite
        - task: CmdLine@2
          displayName: Run Regression Tests
          continueOnError: true
          inputs:
            script: 'newman run Regression.postman_collection.json -e Tanttn-Udacity-Env.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        # Postman - Publish Results 
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/TEST-*.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
            mergeTestResults: true
            testRunTitle: 'ReportTestWithPostman'
      - job: JMeterTest
        displayName: Performance testing by JMeter
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.2.tgz
              tar -xzvf apache-jmeter-5.6.2.tgz
            workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite"
            displayName: "Install JMeter"
          - script: |
              mkdir -p html-report/stress-test
              apache-jmeter-5.6.2/bin/jmeter -n -t StressTest-tanttn.jmx -l simple-result-stress-test.csv -e -o html-report/stress-test
            workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite"
            displayName: "Execute JMeter Test Stress Test"

          - script: |
              mkdir -p html-report/endurance-test
              apache-jmeter-5.6.2/bin/jmeter -n -t EnduranceTest-tanttn.jmx -l simple-result-endurance-test.csv -e -o html-report/endurance-test
            workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite"
            displayName: "Execute JMeter Test Endurance Test"

          - task: ArchiveFiles@2
            displayName: "Archive PerformanceTestSuite"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite/html-report"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip"
          # JMeter Test Suite - Publish
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
            displayName: "Upload Performance Test Result"
            artifact: tanttn-perftests
      - deployment: TestOnVM
        dependsOn: JMeterTest
        condition: succeeded()
        displayName: UI Testing By Selenium
        environment:
          name: "tantnt-udacity-test-env"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  inputs:
                    targetType: inline
                    script: |
                      #!/bin/bash
                      sudo add-apt-repository universe
                      sudo apt-get update
                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo snap remove chromium
                      sudo apt-get install -y chromium-browser
                      pip3 install selenium

                      # download chrome driver
                      FILE=chromedriver_linux64.zip
                      if [ -f "$FILE" ]; then
                        echo "$FILE exists."
                      else
                        wget https://chromedriver.storage.googleapis.com/112.0.5615.28/chromedriver_linux64.zip
                      fi
                      echo "Place"
                      pwd
                      echo "list out"
                      ls
                      # install chrome driver
                      unzip -o chromedriver_linux64.zip
                      sudo mkdir -p /usr/bin/chromedriver
                      sudo mv chromedriver /usr/bin/chromedriver
                      sudo chown root:root /usr/bin/chromedriver
                      sudo chmod +x /usr/bin/chromedriver
                      export PATH=$PATH:/usr/bin/chromedriver
                      chromium-browser -version
                      echo "chrome driver"
                      chromedriver --version

                      cd $(Pipeline.Workspace)/tanttn-selenium
                      unzip -o $(Build.BuildId)-selenium.zip
                      sudo mkdir -p /var/log/selenium
                      sudo chmod 664 /var/log/selenium
                      python3 login.py > ui-logs.log
                      python3 login.py
                      sudo mv ui-logs.log /var/log/selenium
                      cd $(System.DefaultWorkingDirectory)
                      mkdir -p log/selenium
                      sudo cp /var/log/selenium/ui-logs.log log/selenium
                  displayName: "Execute UI Test Suite"
                # JMeter Test Suite - Publish
                - task: PublishPipelineArtifact@1
                  displayName: 'Upload Selenium Result'
                  inputs:
                    targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/ui-logs.log'
                    artifact: 'tanttn-selenium-logs'